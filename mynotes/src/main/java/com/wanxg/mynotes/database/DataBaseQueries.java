package com.wanxg.mynotes.database;

public class DataBaseQueries {
	
	
	public static final int TOKEN_INITIAL_ID = 100000000;
	
	/*************************************************DDL***************************************************/
	
	public static final String SQL_CREATE_TABLE_LOCAL_USER = "CREATE TABLE IF NOT EXISTS local_user ("
			+ "uid VARCHAR(255) NOT NULL, "
			+ "email VARCHAR(255) NOT NULL PRIMARY KEY, "
			+ "password VARCHAR(255) NOT NULL, "
			+ "password_salt VARCHAR(255) NOT NULL, "
			+ "UNIQUE (uid))";

	public static final String SQL_CREATE_TABLE_USER_PROFILE = "CREATE TABLE IF NOT EXISTS user_profile ("
			+ "pid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100000000, INCREMENT BY 1) PRIMARY KEY, "
			+ "user_id VARCHAR(255), "
			+ "email VARCHAR(255) NOT NULL, "
			+ "username VARCHAR(255) NOT NULL, "
			+ "first_name VARCHAR(255), "
			+ "last_name VARCHAR(255), "
			+ "photo_url VARCHAR(512), "
			+ "gender INTEGER, "
			+ "creation TIMESTAMP(0) DEFAULT NOW, "
			+ "active INTEGER DEFAULT 1 NOT NULL)";
	
	public static final String SQL_ALTER_TABLE_USER_PROFILE_ADD_CONSTRAINT_FOREIGN_KEY_UID = "ALTER TABLE user_profile ADD CONSTRAINT IF NOT EXISTS "
			+ "fk_user_profile_local_user_uid FOREIGN KEY (user_id) REFERENCES local_user(uid)";
	
	
	public static final String SQL_CREATE_TABLE_SOCIAL_USER = "CREATE TABLE IF NOT EXISTS social_user ("
			+ "sid INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100000000, INCREMENT BY 1) PRIMARY KEY, "
			+ "profile_id INTEGER NOT NULL, "
			+ "social_provider VARCHAR(32) NOT NULL, "
			+ "external_id VARCHAR(255) NOT NULL, "
			+ "email VARCHAR(255), "
			+ "username VARCHAR(255) NOT NULL, "
			+ "first_name VARCHAR(255), "
			+ "last_name VARCHAR(255), "
			+ "photo_url VARCHAR(512), "
			+ "gender INTEGER, "
			+ "creation TIMESTAMP(0) DEFAULT NOW)";
	
	
	public static final String SQL_ALTER_TABLE_SOCIAL_USER_ADD_CONSTRAINT_FOREIGN_KEY_PID = "ALTER TABLE social_user ADD CONSTRAINT IF NOT EXISTS "
			+ "fk_social_user_user_profile_pid FOREIGN KEY (profile_id) REFERENCES user_profile(pid)";

	public static final String SQL_CREATE_TABLE_AUTH_TOKEN = "CREATE TABLE IF NOT EXISTS auth_token ("
			+ "tid VARCHAR(10) NOT NULL PRIMARY KEY, "
			+ "user_id VARCHAR(255) NOT NULL, "
			+ "token VARCHAR(255) NOT NULL, "
			+ "token_salt VARCHAR(255) NOT NULL, "
			+ "creation TIMESTAMP(0) DEFAULT NOW NOT NULL, "
			+ "valid_to TIMESTAMP(0) NOT NULL, "
			+ "deleted INTEGER DEFAULT 0 NOT NULL)";
	
	public static final String SQL_ALTER_TABLE_AUTH_TOKEN_ADD_CONSTRAINT_FOREIGN_KEY_UID = "ALTER TABLE auth_token ADD CONSTRAINT IF NOT EXISTS "
			+ "fk_auth_token_local_user_uid FOREIGN KEY (user_id) REFERENCES local_user(uid)";
	
	
	public static final String SQL_CREATE_TABLE_USER_ROLE = "CREATE TABLE IF NOT EXISTS user_role ("
			+ "email VARCHAR(255) NOT NULL, "
			+ "role VARCHAR(255) NOT NULL, "
			+ "PRIMARY KEY (email,role))";

	public static final String SQL_CREATE_TABLE_ROLE_PERM = "CREATE TABLE IF NOT EXISTS role_perm ("
			+ "role VARCHAR(255) NOT NULL PRIMARY KEY, "
			+ "permission VARCHAR(255) NOT NULL)";

	public static final String SQL_ALTER_TABLE_USER_ROLE_ADD_CONSTRAINT_FOREIGN_KEY_EMAIL = "ALTER TABLE user_role ADD CONSTRAINT IF NOT EXISTS "
			+ "fk_user_role_local_user_email FOREIGN KEY (email) REFERENCES local_user(email)";

	public static final String SQL_ALTER_TABLE_USER_ROLE_ADD_CONSTRAINT_FOREIGN_KEY_ROLE = "ALTER TABLE user_role ADD CONSTRAINT IF NOT EXISTS "
			+ "fk_user_role_perm_role FOREIGN KEY (role) REFERENCES role_perm(role)";

	
	/***********************************************DML******************************************************/
	
	public static final String SQL_INSERT_INTO_USER = "INSERT INTO local_user (uid,email,password,password_salt) VALUES (?,?,?,?)";
	
	public static final String SQL_SELECT_USER_BY_EMAIL = "SELECT * FROM local_user WHERE email = ?";
	
	public static final String SQL_SELECT_USER_BY_UID = "SELECT * FROM local_user WHERE uid = ?";
	
	public static final String SQL_UPDATE_USER_SET_ACTIVE = "UPDATE local_user SET ACTIVE = ? WHERE email = ?";
	
	public static final String SQL_UPDATE_USER_PASSWORD = "UPDATE local_user SET password = ?, password_salt = ? WHERE uid = ?";
	
	public static final String SQL_INSERT_INTO_USER_PROFILE = "INSERT INTO user_profile (user_id,email,username,first_name,last_name,photo_url,gender) VALUES (?,?,?,?,?,?,?)";
	
	public static final String SQL_UPDATE_USER_PROFILE = "UPDATE user_profile SET username = ?, first_name = ?, last_name = ?, gender = ? WHERE pid = ?";
	
	public static final String SQL_UPDATE_USER_PROFILE_SET_UID = "UPDATE user_profile SET user_id = ? WHERE pid = ?";
	
	public static final String SQL_SELECT_USER_PROFILE_BY_USER_ID = "SELECT * FROM user_profile WHERE user_id = ?";
	
	public static final String SQL_SELECT_USER_PROFILE_BY_PROFILE_ID = "SELECT * FROM user_profile WHERE pid = ?";
	
	public static final String SQL_SELECT_USER_PROFILE_BY_EMAIL = "SELECT * FROM user_profile RIGHT JOIN local_user on user_profile.user_id = local_user.uid WHERE email = ?";
	
	public static final String SQL_INSERT_INTO_SOCIAL_USER = "INSERT INTO social_user (profile_id,social_provider,external_id,email,username,first_name,last_name,photo_url,gender) VALUES (?,?,?,?,?,?,?,?,?)";
	
	public static final String SQL_UPDATE_SOCIAL_USER = "UPDATE social_user SET email = ?, username = ?, first_name = ?, last_name = ?, photo_url = ?, gender = ? WHERE external_id = ?";
	
	public static final String SQL_SELECT_SOCIAL_USER_BY_EXTERNAL_ID = "SELECT * FROM social_user WHERE external_id = ?";
	
	public static final String SQL_SELECT_SOCIAL_USER_BY_PROFILE_ID = "SELECT * FROM social_user WHERE profile_id = ?";
	
	public static final String SQL_SELECT_MAX_TOKEN_ID = "SELECT max(tid) FROM auth_token";
	
	public static final String SQL_INSERT_INTO_AUTH_TOKEN = "INSERT INTO auth_token (tid,user_id,token,token_salt,valid_to) VALUES (?,?,?,?, TO_TIMESTAMP(?, 'YYYY-MM-DD HH:MI:SS' ))";
	
	public static final String SQL_UPDATE_AUTH_TOKEN_SET_INVALID = "UPDATE auth_token SET deleted = 1 WHERE tid = ?";
	
	public static final String SQL_SELECT_AUTH_TOKEN_BY_USER_ID_AND_TOKEN_ID = 
			"SELECT token, token_salt FROM auth_token LEFT JOIN local_user ON auth_token.email = local_user.email WHERE local_user.uid = ? AND auth_token.tid = ?";
	
	public static final String AUTHENTICATE_QUERY_ON_TOKEN = "SELECT token, token_salt FROM auth_token WHERE tid = ? AND deleted = 0 AND valid_to >= NOW()";
	
	public static final String AUTHENTICATE_QUERY_ON_LOCAL_USER = "SELECT password, password_salt FROM local_user WHERE email = ?";
	
}
